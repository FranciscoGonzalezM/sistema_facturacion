{% extends 'core/base.html' %}
{% block title %}Facturación{% endblock %}
{% load static %} 
{% block content %}

<div class="container py-3" style="background-color:#e6f2ff; min-height: 600px;">
  <!-- Modal para agregar productos -->
  <div class="modal fade" id="productosModal" tabindex="-1" aria-labelledby="productosModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title" id="productosModalLabel">Seleccionar Productos</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <input type="text" id="buscarProducto" class="form-control" placeholder="Buscar producto...">
          </div>
          <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
            <table class="table table-sm table-hover">
              <thead class="table-light">
                <tr>
                  <th>ID</th>
                  <th>Código</th>
                  <th>Nombre</th>
                  <th>Precio</th>
                  <th>Stock</th>
                  <th>Acción</th>
                </tr>
              </thead>
              <tbody id="listaProductos">
                {% for p in productos %}
                <tr data-id="{{ p.id }}" 
                    data-codigo="{{ p.codigo|default:'' }}" 
                    data-nombre="{{ p.nombre }}"
                    data-precio="{{ p.precio }}" 
                    data-stock="{{ p.stock }}">
                  <td>{{ p.id }}</td>
                  <td>{{ p.codigo|default:"-" }}</td>
                  <td>{{ p.nombre }}</td>
                  <td class="text-end">${{ p.precio }}</td>
                  <td class="text-center">{{ p.stock }}</td>
                  <td class="text-center">
                    <button class="btn btn-sm btn-primary btn-agregar">Agregar</button>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Contenido principal -->
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="text-primary fw-bold">FACTURACIÓN</h4>
    <div class="text-end">
      <small class="text-muted">Usuario: <strong>{{ request.user.username }}</strong></small><br>
      <small id="clock" class="badge bg-primary text-white px-2"></small>
    </div>
  </div>

  
    <div class="col-md-10">
      <form id="facturaForm" method="post" novalidate>
        {% csrf_token %}
        <div class="row gy-2 align-items-center">
          <div class="col-md-2">
            <label for="numeroFactura" class="form-label fw-bold">Factura No.</label>
            <input type="text" id="numeroFactura" name="numeroFactura" class="form-control fw-bold text-danger" value="173488" readonly>
          </div>
          <div class="col-md-2">
            <label for="fechaFactura" class="form-label fw-bold">Fecha</label>
            <input type="date" id="fechaFactura" name="fechaFactura" class="form-control fw-bold text-danger" value="{{ fecha|default:'2025-01-08' }}">
          </div>
          <div class="col-md-4">
            <label class="form-label fw-bold">Tipo Venta</label>
            <select id="tipoVenta" name="tipoVenta" class="form-select">
              <option value="contado" selected>VENTA DE CONTADO</option>
              <option value="credito">CREDITO</option>
            </select>
          </div>
          <div class="col-md-4 text-end">
            <button type="button" class="btn btn-outline-secondary me-2" onclick="preFacturas()">Pre-facturas</button>
            <button type="button" class="btn btn-outline-danger" onclick="salir()">Salir (F8)</button>
          </div>
        </div>

        <hr class="my-3">

        <!-- Campo para búsqueda -->
        <div class="mb-3">
          <div class="input-group">
            <input type="text" id="codigoEscaneado" class="form-control" placeholder="Ingrese ID (ej: 1), código o escanee" autofocus>
            <button class="btn btn-primary" type="button" onclick="buscarProducto()">
              <i class="bi bi-upc-scan"></i> Buscar
            </button>
          </div>
          <small class="text-muted">Ejemplos: 1 (ID), ID1, o escanear código</small>
        </div>

        <h5>Productos</h5>
        <div class="table-responsive" style="max-height: 280px; overflow-y:auto;">
          <table id="tablaProductos" class="table table-bordered table-sm align-middle text-center">
            <thead class="table-light">
              <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Total</th>
                <th>I.V.</th>
                <th>Acción</th>
              </tr>
            </thead>
            <tbody>
              <!-- Las filas se agregarán dinámicamente -->
            </tbody>
          </table>
        </div>

        <div class="mt-3 d-flex gap-2 flex-wrap">
          <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#productosModal">Agregar (F5)</button>
          <button type="button" class="btn btn-outline-danger" onclick="borrarSeleccionados()">Borrar (F6)</button>
          <button type="submit" class="btn btn-success">Confirmar (F7)</button>
          <button type="button" class="btn btn-outline-warning" onclick="cancelar()">Cancelar (F8)</button>
          <button type="button" class="btn btn-outline-info" onclick="mostrarArticulos()">Artículos (F9)</button>
          <button type="button" class="btn btn-outline-secondary" onclick="mostrarProductos()">Productos (F4)</button>
        </div>

        <hr>

        <div class="row justify-content-end">
          <div class="col-md-4">
            <table class="table table-borderless table-sm text-end">
              <tbody>
                <tr>
                  <td><strong>Subtotal:</strong></td>
                  <td><input type="text" id="subtotal" class="form-control form-control-sm text-end fw-bold" value="0.00" readonly></td>
                </tr>
                <tr>
                  <td><strong>Descuento:</strong></td>
                  <td><input type="number" id="descuento" class="form-control form-control-sm text-end" value="0" min="0" step="0.01"></td>
                </tr>
                <tr>
                  <td><strong>Subtotal Desc.:</strong></td>
                  <td><input type="text" id="subtotalDesc" class="form-control form-control-sm text-end fw-bold" value="0.00" readonly></td>
                </tr>
                <tr>
                  <td><strong>I.V.:</strong></td>
                  <td><input type="text" id="ivaTotal" class="form-control form-control-sm text-end fw-bold" value="0.00" readonly></td>
                </tr>
                <tr>
                  <td><strong>Total:</strong></td>
                  <td><input type="text" id="totalFinal" class="form-control form-control-sm text-end fw-bold text-primary" value="0.00" readonly></td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
  // Función para buscar productos
  function buscarProducto() {
    const input = document.getElementById('codigoEscaneado');
    const valor = input.value.trim();
    
    if(!valor) return;
    // Verifica si es un código QR (ejemplo: "QR12345")
  if(valor.startsWith('QR')) {
    // Buscar específicamente por código QR
    const productoEncontrado = Array.from(document.querySelectorAll('#listaProductos tr')).find(tr => {
      return tr.dataset.codigo === valor;
    });
    
    if(productoEncontrado) {
      agregarProductoAFactura(productoEncontrado);
      input.value = '';
      input.focus();
      return;
    }
  }
    // Buscar en la lista de productos
    const productoEncontrado = Array.from(document.querySelectorAll('#listaProductos tr')).find(tr => {
      const idProducto = tr.dataset.id;
      const codigoProducto = tr.dataset.codigo || '';
      const nombreProducto = tr.dataset.nombre.toLowerCase();
      
      // Buscar por:
      // 1. ID exacto (1, 2, 3...)
      // 2. ID con prefijo (ID1, ID2...)
      // 3. Código exacto (para QR)
      // 4. Nombre que contenga el texto
      return idProducto === valor || 
             `ID${idProducto}` === valor.toUpperCase() ||
             codigoProducto === valor ||
             nombreProducto.includes(valor.toLowerCase());
    });
    
    if(productoEncontrado) {
      agregarProductoAFactura(productoEncontrado);
      input.value = '';
      input.focus();
    } else {
      alert(`Producto no encontrado. Pruebe con:
      - ID del producto (ej: 1 o ID1)
      - Código completo
      - Parte del nombre`);
      input.select();
    }
  }

  // Configuración inicial
  document.addEventListener('DOMContentLoaded', function() {
    // Configurar escáner
    const inputEscaneado = document.getElementById('codigoEscaneado');
    
    // Detectar entrada rápida (para escáner)
    let timer;
    inputEscaneado.addEventListener('input', function(e) {
      clearTimeout(timer);
      timer = setTimeout(() => {
        if(this.value.length >= 1) { // Basta con 1 carácter para ID
          buscarProducto();
        }
      }, 300); // Tiempo ajustado para escáner
    });
    
    // Búsqueda con Enter
    inputEscaneado.addEventListener('keypress', function(e) {
      if(e.key === 'Enter') {
        buscarProducto();
        e.preventDefault();
      }
    });
    
    inputEscaneado.focus();

    // Configurar eventos para los botones agregar en el modal
    document.querySelectorAll('.btn-agregar').forEach(btn => {
      btn.addEventListener('click', function() {
        const filaProducto = this.closest('tr');
        agregarProductoAFactura(filaProducto);
        
        // Cerrar el modal después de agregar
        const modal = bootstrap.Modal.getInstance(document.getElementById('productosModal'));
        modal.hide();
      });
    });
  });

  // Función para mostrar productos (F4)
  function mostrarProductos() {
    const modal = new bootstrap.Modal(document.getElementById('productosModal'));
    modal.show();
    setTimeout(() => {
      document.getElementById('buscarProducto').focus();
    }, 500);
  }

  // Función para agregar producto a la factura
  function agregarProductoAFactura(producto) {
    const tbody = document.querySelector('#tablaProductos tbody');
    
    // Verificar si el producto ya está en la tabla
    const filaExistente = Array.from(tbody.querySelectorAll('tr')).find(tr => 
      tr.dataset.id === producto.dataset.id
    );
    
    if (filaExistente) {
      const cantidadInput = filaExistente.querySelector('.cantidad');
      const stock = parseInt(producto.dataset.stock);
      const cantidadActual = parseInt(cantidadInput.value) || 0;
      
      if (cantidadActual < stock) {
        cantidadInput.value = cantidadActual + 1;
        calcularTotales();
      } else {
        alert('No hay suficiente stock disponible');
      }
      return;
    }
    
    // Si no existe, crear nueva fila
    const fila = document.createElement('tr');
    fila.dataset.id = producto.dataset.id;
    
    fila.innerHTML = `
      <td>${producto.dataset.id}</td>
      <td class="text-start">${producto.dataset.nombre}</td>
      <td><input type="number" min="1" max="${producto.dataset.stock}" value="1" class="form-control form-control-sm cantidad" style="width:80px;"></td>
      <td class="precio">${producto.dataset.precio}</td>
      <td class="total">${producto.dataset.precio}</td>
      <td><input type="checkbox" class="form-check-input iva-check" checked></td>
      <td><button type="button" class="btn btn-sm btn-danger btn-borrar">Borrar</button></td>
    `;
    
    tbody.appendChild(fila);
    
    // Eventos para la nueva fila
    fila.querySelector('.btn-borrar').addEventListener('click', function() {
      fila.remove();
      calcularTotales();
    });
    
    fila.querySelector('.cantidad').addEventListener('change', calcularTotales);
    
    calcularTotales();
  }

  // Calcular totales
  function calcularTotales() {
    let subtotal = 0;
    let ivaTotal = 0;
    const rows = document.querySelectorAll('#tablaProductos tbody tr');
    
    rows.forEach(row => {
      const cantidad = parseFloat(row.querySelector('.cantidad').value) || 0;
      const precio = parseFloat(row.querySelector('.precio').textContent) || 0;
      const totalCell = row.querySelector('.total');
      const tieneIVA = row.querySelector('.iva-check').checked;

      const total = cantidad * precio;
      totalCell.textContent = total.toFixed(2);

      subtotal += total;
      if (tieneIVA) {
        ivaTotal += total * 0.15;
      }
    });
    
    document.getElementById('subtotal').value = subtotal.toFixed(2);

    const descuento = parseFloat(document.getElementById('descuento').value) || 0;
    const subtotalDesc = Math.max(0, subtotal - descuento);
    document.getElementById('subtotalDesc').value = subtotalDesc.toFixed(2);

    document.getElementById('ivaTotal').value = ivaTotal.toFixed(2);
    document.getElementById('totalFinal').value = (subtotalDesc + ivaTotal).toFixed(2);
  }

  // Buscar productos en el modal
  document.getElementById('buscarProducto').addEventListener('input', function() {
    const busqueda = this.value.toLowerCase();
    const filas = document.querySelectorAll('#listaProductos tr');
    
    filas.forEach(fila => {
      const textoFila = fila.textContent.toLowerCase();
      fila.style.display = textoFila.includes(busqueda) ? '' : 'none';
    });
  });

  // Borrar filas con cantidad cero
  function borrarSeleccionados() {
    document.querySelectorAll('#tablaProductos tbody tr').forEach(row => {
      if (parseInt(row.querySelector('.cantidad').value) === 0) {
        row.remove();
      }
    });
    calcularTotales();
  }

  // Funciones auxiliares
  function cancelar() {
    if (confirm('¿Seguro que quieres cancelar la factura?')) {
      document.querySelector('#tablaProductos tbody').innerHTML = '';
      calcularTotales();
    }
  }
  function preFacturas() {
    alert('Mostrar pre-facturas');
  }
  function salir() {
    if(confirm('¿Salir del módulo de facturación?')) {
      window.location.href = '/';
    }
  }
  function mostrarArticulos() {
    alert('Mostrar listado de artículos');
  }
</script>

<style>
  input[type="number"] {
    text-align: right;
  }
  .precio, .total {
    text-align: right;
  }
  #productosModal .table-hover tbody tr:hover {
    background-color: #f5f5f5;
    cursor: pointer;
  }
  #codigoEscaneado {
    font-size: 1.2rem;
    padding: 10px;
  }
  .btn-agregar:hover {
    transform: scale(1.05);
    transition: transform 0.2s;
  }
</style>
{% endblock %}