# ---- Generar PDF de factura ----
@login_required
@user_passes_test(es_admin_o_vendedor)
def factura_pdf(request, pk):
    factura = get_object_or_404(Factura, id=pk)
    detalles = factura.detalles.all()
    
    # Calcular IVA y total con IVA para cada detalle (igual que en factura_detalle)
    for detalle in detalles:
        detalle.iva_monto = detalle.subtotal * Decimal('0.15') if detalle.iva else Decimal('0.00')
        detalle.total_con_iva = detalle.subtotal + detalle.iva_monto

    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="Factura_{factura.id}.pdf"'

    # Crear el PDF
    doc = SimpleDocTemplate(response, pagesize=letter, 
                          rightMargin=1*cm, leftMargin=1*cm,
                          topMargin=1*cm, bottomMargin=1*cm)
    
    elements = []
    styles = getSampleStyleSheet()
    
    # Estilos personalizados
    title_style = ParagraphStyle(
        'Title',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30,
        alignment=1  # Centrado
    )
    
    header_style = ParagraphStyle(
        'Header',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=6
    )
    
    # Título
    elements.append(Paragraph(f"FACTURA #{factura.id}", title_style))
    
    # Información de la factura
    cliente_nombre = factura.cliente.nombre if factura.cliente else "Consumidor Final"
    info_data = [
        [Paragraph(f"<b>Fecha:</b> {factura.fecha.strftime('%d/%m/%Y %H:%M')}", header_style),
         Paragraph(f"<b>Cliente:</b> {cliente_nombre}", header_style)],
        [Paragraph(f"<b>Tipo:</b> {factura.get_tipo_venta_display()}", header_style),
         Paragraph(f"<b>Cajero:</b> {factura.usuario.get_full_name() or factura.usuario.username}", header_style)]
    ]
    
    info_table = Table(info_data, colWidths=[doc.width/2.0]*2)
    info_table.setStyle(TableStyle([
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
    ]))
    
    elements.append(info_table)
    elements.append(Spacer(1, 0.5*cm))
    
    # Tabla de productos
    product_data = [['Producto', 'Cant.', 'Precio Unit.', 'Subtotal', 'IVA (15%)', 'Total con IVA']]
    
    for detalle in detalles:
        product_data.append([
            detalle.producto.nombre,
            str(detalle.cantidad),
            f"${detalle.precio_unitario:.2f}",
            f"${detalle.subtotal:.2f}",
            f"${detalle.iva_monto:.2f}" if detalle.iva else "$0.00",
            f"${detalle.total_con_iva:.2f}"
        ])
    
    product_table = Table(product_data, colWidths=[doc.width/6.0]*6, repeatRows=1)
    product_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
        ('ALIGN', (0, 1), (0, -1), 'LEFT'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 9),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    elements.append(product_table)
    elements.append(Spacer(1, 0.5*cm))
    
    # Totales
    subtotal_con_descuento = max(Decimal('0.00'), factura.subtotal - factura.descuento)
    
    total_data = [
        ['Subtotal:', f"${factura.subtotal:.2f}"],
        ['Descuento:', f"${factura.descuento:.2f}"],
        ['Subtotal con descuento:', f"${subtotal_con_descuento:.2f}"],
        ['IVA Total:', f"${factura.iva_total:.2f}"],
        ['TOTAL:', f"${factura.total:.2f}"]
    ]
    
    # Agregar monto recibido y vuelto si es venta de contado
    if factura.tipo_venta == 'contado':
        total_data.extend([
            ['Monto Recibido:', f"${factura.monto_recibido:.2f}"],
            ['Vuelto:', f"${factura.vuelto:.2f}"]
        ])
    
    total_table = Table(total_data, colWidths=[doc.width/2.0]*2)
    total_table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('LINEABOVE', (0, 3), (-1, 3), 1, colors.black),
        ('FONTNAME', (0, 4), (-1, 4), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 4), (-1, 4), 12),
        ('LINEABOVE', (0, 4), (-1, 4), 1, colors.black),
    ]))
    
    elements.append(total_table)
    
    # Construir el PDF
    doc.build(elements)
    
    return response